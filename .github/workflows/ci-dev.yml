name: ci-dev

on:
  push:
    branches:
      - develop

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [14]

    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup node env üèó
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node }}

      - name: Cache node_modules üì¶
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      #- name: Install dependencies üë®üèª‚Äçüíª
      #  run: npm i --silent

      #- name: Run build üß™
      #  run: npm run build
      #- name: Run linter üëÄ
      #  run: npm run lint

      #- name: Run tests üß™
      #  run: npm run test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY:  ras-api-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set environment variables in ECS task definition file
        id: env-task-dev
        env:
          APP_NAME: ras-api
          APP_PORT: 3000
          NODE_ENV: dev
          AWS_REGION: ap-southeast-1
          DB_HOST: ${{ secrets.DB_HOST_DEV }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME_DEV }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD_DEV }}
          DB_NAME: ${{ secrets.DB_NAME_DEV }}
          AWS_COGNITO_IDENTITY_POOL_ID: ${{ secrets.AWS_COGNITO_IDENTITY_POOL_ID }}
          AWS_COGNITO_USER_POOL_ID: ${{ secrets.AWS_COGNITO_USER_POOL_ID }}
          AWS_COGNITO_CLIENT_ID: ${{ secrets.AWS_COGNITO_CLIENT_ID }}
          AWS_COGNITO_CLIENT_SECRET: ${{ secrets.AWS_COGNITO_CLIENT_SECRET }}
          JWTKEY: ${{ secrets.JWTKEY }}
          CORS: ${{ secrets.FRONT_URL_DEV }}
        run: |
          sed -i "s|<app_name>|$APP_NAME|g" task-definition.json 
          sed -i "s|<app_port>|$APP_PORT|g" task-definition.json
          sed -i "s|<node_env>|$NODE_ENV|g" task-definition.json 
          sed -i "s|<aws_region>|$AWS_REGION|g" task-definition.json 
          sed -i "s|<db_type>|$DB_TYPE|g" task-definition.json 
          sed -i "s|<db_host>|$DB_HOST|g" task-definition.json 
          sed -i "s|<db_port>|$DB_PORT|g" task-definition.json 
          sed -i "s|<db_username>|$DB_USERNAME|g" task-definition.json 
          sed -i "s|<db_password>|$DB_PASSWORD|g" task-definition.json 
          sed -i "s|<db_name>|$DB_NAME|g" task-definition.json  
          sed -i "s|<aws_cognito_user_pool_id>|$AWS_COGNITO_USER_POOL_ID|g" task-definition.json 
          sed -i "s|<aws_cognito_client_id>|$AWS_COGNITO_CLIENT_ID|g" task-definition.json 
          sed -i "s|<aws_cognito_client_secret>|$AWS_COGNITO_CLIENT_SECRET|g" task-definition.json 
          sed -i "s|<aws_cognito_identity_pool_id>|$AWS_COGNITO_IDENTITY_POOL_ID|g" task-definition.json 
          sed -i "s|<jwtkey>|$JWTKEY|g" task-definition.json 
          sed -i "s|<cors>|$CORS|g" task-definition.json 
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name:  ras-api-dev
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service:  ras-api-dev-service
          cluster: ras-dev
          wait-for-service-stability: true